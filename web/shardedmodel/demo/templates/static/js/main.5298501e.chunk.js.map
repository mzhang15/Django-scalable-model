{"version":3,"sources":["addUser.js","allUsers.js","userDetail.js","App.js","serviceWorker.js","index.js"],"names":["addUser","props","handlePopup","setState","showModal","handleNameChange","event","name","target","value","handleEmailChange","email","handleNidChange","nid","handlePasswordChange","password","handleClose","send","fetch","method","headers","body","JSON","stringify","state","then","response","ok","json","errors","errorMsg","Object","values","res","undefined","className","type","this","onChange","onClick","evt","Component","AllUser","users","map","user","i","href","UserDetail","handleNewPostChange","newpost","match","params","id","post","posts","_isMounted","Error","Row","Table","striped","bordered","hover","key","App","exact","path","component","AddUser","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5298501e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport './signup.css'\n\nclass addUser extends Component {\n    constructor(props) {\n      super(props);\n  \n      this.state = {\n        name: \"\",\n        email: \"\",\n        nid: \"\",\n        password: \"\",\n        errorMsg: \"\"\n      };\n    }\n    \n    handlePopup = () => {\n        this.setState({showModal : true});\n    }\n    handleNameChange = (event) => {\n      this.setState({ name: event.target.value });\n    }\n\n    handleEmailChange = (event) => {\n        this.setState({ email: event.target.value });\n    }\n\n    handleNidChange = (event) => {\n        this.setState({ nid: event.target.value });\n    }\n\n    handlePasswordChange = (event) => {\n        this.setState({ password: event.target.value });\n    }\n\n    handleClose = (event) => {\n        this.setState({ showModal: false });\n    }\n    \n    send = () => {\n        fetch('/adduser', {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                name: this.state.name,\n                email: this.state.email,\n                nid: this.state.nid,\n                password: this.state.password\n            })\n        })\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                } else {\n                    response.json()\n                        .then(errors => {\n                            this.setState({\n                                errorMsg: Object.values(errors)[0]\n                            })\n                        })\n                }\n            }).then((res) => {\n                if (res !== undefined) {\n                    this.setState({\n                        name: \"\",\n                        email: \"\",\n                        nid: \"\",\n                        password: \"\",\n                        errorMsg: \"\",\n                    })\n                }\n            });\n    }\n\n    render() {\n        return (\n            <div>\n                <label className=\"ilabel\">\n                    Name:\n                    <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleNameChange} />\n                </label>\n                <label className=\"ilabel\">\n                    Email:\n                    <input type=\"text\" name=\"email\" value={this.state.email} onChange={this.handleEmailChange} />\n                </label>\n                <label className=\"ilabel\">\n                    Net ID:\n                    <input type=\"text\" name=\"nid\" value={this.state.nid} onChange={this.handleNidChange} />\n                </label>\n                <label className=\"ilabel\">\n                    Password:\n                    <input type=\"text\" name=\"password\" value={this.state.password} onChange={this.handlePasswordChange} />\n                </label>\n                <p className='error-msg'>{this.state.errorMsg}</p>\n                <button className=\"signup-btn\" onClick={(evt) => { this.send(); }}>Create User</button>\n            </div>\n        )\n    }\n}\n  \nexport default addUser;\n","import React, { Component } from \"react\";\n\nclass AllUser extends Component {\n    constructor(props) {\n      super(props);\n  \n      this.state = {\n          users : [{nid: 1234, name:'jack'}]\n      };\n    }\n    \n    send = () => {\n        fetch('/all', { method: \"GET\" })\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                } else {\n                    response.json()\n                        .then(errors => {\n                            this.setState({\n                                errorMsg: Object.values(errors)[0]\n                            })\n                        })\n                }\n            }).then((res) => {\n                if (res !== undefined) {\n                    this.setState({\n                        users : res.users\n                    })\n                }\n            });\n    }\n\n    render() {\n        return (\n            <div>\n                <p>All users in db :</p>\n                {this.state.users.map((user, i) => (\n                    <a href={`/user/${user.nid}`}>{user.name}</a>\n                ))}\n            </div>\n        )\n    }\n}\n  \nexport default AllUser;\n","import React, { Component } from \"react\";\nimport { Table, Row } from \"react-bootstrap\";\nimport './userDetail.css';\n\nclass UserDetail extends Component {\n    constructor(props) {\n        super(props);\n        this._isMounted = true;\n        this.state = {\n            name: '',\n            nid: '',\n            email: '',\n            posts: [],\n            newpost: ''\n        };\n    }\n\n    componentWillMount() {\n        this._isMounted = true;\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    componentDidMount() {\n        fetch(`/user/id=${this.props.match.params.id}`, { method: \"GET\" })\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                } else {\n                    throw new Error('Network response was not ok.');\n                }\n            }).then(response => {\n                if (this._isMounted) {\n                    this.setState({\n                        name: response.name,\n                        nid: response.nid,\n                        email: response.email,\n                        posts: response.posts\n                    })\n                }\n            });\n    }\n\n    handleNewPostChange = (event) => {\n        this.setState({ newpost: event.target.value });\n    }\n\n    send = () => {\n        fetch('/addpost', {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                user: this.props.match.params.id,\n                post: this.state.newpost\n            })\n        })\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                } else {\n                    response.json()\n                        .then(errors => {\n                            this.setState({\n                                errorMsg: Object.values(errors)[0]\n                            })\n                        })\n                }\n            }).then((res) => {\n                if (res !== undefined) {\n                    this.setState({\n                        posts: res.posts\n                    })\n                }\n            });\n    }\n\n    render() {\n        return (\n            <div>\n                <Row className=\"justify-content-md-center\">\n                    <h3>Name: {this.state.name}</h3>\n                </Row>\n                <Row className=\"justify-content-md-center\">\n                    <h3>Nid: {this.state.nid}</h3>\n                </Row>\n                <Row className=\"justify-content-md-center\">\n                    <h3>Email: {this.state.email}</h3>\n                </Row>\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                            <th>Posts</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.posts.map((post, i) => (\n                            <tr key={i}>\n                                <td>\n                                    <p>{post}</p>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n                <label className=\"ilabel\">\n                    New Post:\n                    <input type=\"text\" name=\"post\" value={this.state.newpost} onChange={this.handleNewPostChange} />\n                </label>\n                <button onClick={(evt) => { this.send(); }}>Create Post</button>\n\n            </div>\n        )\n    }\n}\n\nexport default UserDetail;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport AddUser from './addUser'\nimport AllUser from './allUsers'\nimport UserDetail from './userDetail'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route exact path=\"/add\" component={AddUser} />\n        <Route exact path=\"/user/:id\" component={UserDetail} />\n        <Route exact path=\"/all\" component={AllUser} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}